--- a/Makefile	2017-06-07 23:23:10.203873716 +0000
+++ b/Makefile	2017-06-07 23:24:25.497204747 +0000
@@ -78,10 +78,10 @@ CFLAGS += -idirafter yajl-fallback
 OBJS:=$(sort $(wildcard src/*.c *.c))
 OBJS:=$(OBJS:.c=.o)
 
-ifeq ($(OS),OpenBSD)
+#ifeq ($(OS),OpenBSD)
 OBJS:=$(filter-out src/pulse.o, $(OBJS))
 LIBS:=$(filter-out -lpulse, $(LIBS))
-endif
+#endif
 
 src/%.o: src/%.c include/i3status.h
 	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<
--- a/src/print_volume.c	2017-06-07 23:26:29.500534296 +0000
+++ b/src/print_volume.c	2017-06-07 23:27:19.690532770 +0000
@@ -61,52 +61,52 @@ void print_volume(yajl_gen json_gen, cha
         free(instance);
     }
 
-#ifndef __OpenBSD__
-    /* Try PulseAudio first */
-
-    /* If the device name has the format "pulse[:N]" where N is the
-     * index of the PulseAudio sink then force PulseAudio, optionally
-     * overriding the default sink */
-    if (!strncasecmp(device, "pulse", strlen("pulse"))) {
-        uint32_t sink_idx = device[strlen("pulse")] == ':' ? (uint32_t)atoi(device + strlen("pulse:")) : DEFAULT_SINK_INDEX;
-        const char *sink_name = device[strlen("pulse")] == ':' &&
-                                        !isdigit(device[strlen("pulse:")])
-                                    ? device + strlen("pulse:")
-                                    : NULL;
-        int cvolume = pulse_initialize() ? volume_pulseaudio(sink_idx, sink_name) : 0;
-        int ivolume = DECOMPOSE_VOLUME(cvolume);
-        bool muted = DECOMPOSE_MUTED(cvolume);
-        if (muted) {
-            START_COLOR("color_degraded");
-            pbval = 0;
-        }
-        /* negative result means error, stick to 0 */
-        if (ivolume < 0)
-            ivolume = 0;
-        outwalk = apply_volume_format(muted ? fmt_muted : fmt,
-                                      outwalk,
-                                      ivolume);
-        goto out;
-    } else if (!strcasecmp(device, "default") && pulse_initialize()) {
-        /* no device specified or "default" set */
-        int cvolume = volume_pulseaudio(DEFAULT_SINK_INDEX, NULL);
-        int ivolume = DECOMPOSE_VOLUME(cvolume);
-        bool muted = DECOMPOSE_MUTED(cvolume);
-        if (ivolume >= 0) {
-            if (muted) {
-                START_COLOR("color_degraded");
-                pbval = 0;
-            }
-            outwalk = apply_volume_format(muted ? fmt_muted : fmt,
-                                          outwalk,
-                                          ivolume);
-            goto out;
-        }
-        /* negative result means error, fail PulseAudio attempt */
-    }
-/* If some other device was specified or PulseAudio is not detected,
- * proceed to ALSA / OSS */
-#endif
+//#ifndef __OpenBSD__
+//    /* Try PulseAudio first */
+//
+//    /* If the device name has the format "pulse[:N]" where N is the
+//     * index of the PulseAudio sink then force PulseAudio, optionally
+//     * overriding the default sink */
+//    if (!strncasecmp(device, "pulse", strlen("pulse"))) {
+//        uint32_t sink_idx = device[strlen("pulse")] == ':' ? (uint32_t)atoi(device + strlen("pulse:")) : DEFAULT_SINK_INDEX;
+//        const char *sink_name = device[strlen("pulse")] == ':' &&
+//                                        !isdigit(device[strlen("pulse:")])
+//                                    ? device + strlen("pulse:")
+//                                    : NULL;
+//        int cvolume = pulse_initialize() ? volume_pulseaudio(sink_idx, sink_name) : 0;
+//        int ivolume = DECOMPOSE_VOLUME(cvolume);
+//        bool muted = DECOMPOSE_MUTED(cvolume);
+//        if (muted) {
+//            START_COLOR("color_degraded");
+//            pbval = 0;
+//        }
+//        /* negative result means error, stick to 0 */
+//        if (ivolume < 0)
+//            ivolume = 0;
+//        outwalk = apply_volume_format(muted ? fmt_muted : fmt,
+//                                      outwalk,
+//                                      ivolume);
+//        goto out;
+//    } else if (!strcasecmp(device, "default") && pulse_initialize()) {
+//        /* no device specified or "default" set */
+//        int cvolume = volume_pulseaudio(DEFAULT_SINK_INDEX, NULL);
+//        int ivolume = DECOMPOSE_VOLUME(cvolume);
+//        bool muted = DECOMPOSE_MUTED(cvolume);
+//        if (ivolume >= 0) {
+//            if (muted) {
+//                START_COLOR("color_degraded");
+//                pbval = 0;
+//            }
+//            outwalk = apply_volume_format(muted ? fmt_muted : fmt,
+//                                          outwalk,
+//                                          ivolume);
+//            goto out;
+//        }
+//        /* negative result means error, fail PulseAudio attempt */
+//    }
+///* If some other device was specified or PulseAudio is not detected,
+// * proceed to ALSA / OSS */
+//#endif
 
 #ifdef LINUX
     int err;
